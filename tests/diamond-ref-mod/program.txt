// let mut x = 42;
// let mut p = &22;
// if maybe() {
//     p = &x; // L_x 
// } else {
//     x = 0;
// }
// use(p);

// Decls
// let x: u32
// let p: &'p u32
// 
// Loan origins:
// 'const: `p`'s borrow of `22`
// 'L_x: `p`'s borrow of `x` 

a: "x = 42" {
    invalidate_lease('L_x)
    goto b
}

b: "p = &'const 22" {
    // Clear all origins in `p` (overwritten plan):
    clear_origin('p)

    // `&'const u32 <: &'p u32`
    introduce_lease('const, 'p) 

    goto c d
}

c: "p = &'L_x x" {
    // Access `x` where `x: u32`
    
    // Invalidate mutable borrows of `x`

    // Clear all origins in `p` (overwritten plan):
    clear_origin('p)

    // `&'L_x u32 <: &'p u32`
    introduce_lease('L_x, 'p) 
    
    goto e
}

d: "x = 0" {
    // Invalidate borrows of `x`
    invalidate_lease('L_x)

    goto e 
}

e: "use(p)" {
    // Access `p` [== `&'p x`] where `x: u32`
    access_origin('p)

    goto 
}