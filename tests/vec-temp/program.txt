// let mut x = 22;
// let mut v = vec![];
// let p = &x;
// let tmp = &mut v;
// Vec::push(tmp, p);
// x = 23;
// Vec::len(&v); // ERROR

// Decls
// let x: u32
// let v: Vec<&'v mut u32>
// let p: &'p u32
// let tmp: &'tmp0 mut Vec<&'tmp1 mut u32>
//
// Loan origins:
// 'L_x
// 'L_v

a: "x = 22" {
    // Any thing borrowing `x` is invalid now
    invalidate_lease('L_x)
    goto b
}

b: "v = vec![]" {
    // v is overwritten
    clear_origin('v)
    invalidate_lease('L_v)
    goto c
}

c: "p = &'L_x x" {
    // read from x

    // Clear all origins in `p` (overwritten plan):
    clear_origin('p)

    // `&'L_x u32 <: &'p u32`
    introduce_lease('L_x, 'p) 
    goto d
}

d: "tmp = &'L_v mut v" {
    // write to v
    access_origin('v)
    invalidate_lease('L_v)

    // `tmp` is overwritten, `'tmp0` and `'tmp1` should be cleared here
    clear_origin('tmp0)
    clear_origin('tmp1)

    // &'L_v mut Vec<&'v mut u32> <: &'tmp0 Vec<&'tmp1 mut u32>
    introduce_lease('L_v, 'tmp0)
    introduce_subset('tmp1, 'v)
    introduce_subset('v, 'tmp1)
    goto e
}

e: "Vec::push(tmp, p)" {
    // access_origin origins in the arguments
    access_origin('tmp0)
    access_origin('tmp1)
    access_origin('p)

    // Signature requires `&'p u32` <: `&'tmp1 u32`:
    introduce_subset('p, 'tmp1)

    goto f

}

f: "x = 23" {
    invalidate_lease('L_x)
    goto g
}

g: "Vec::len(v)" {
    access_origin('v)
    goto
}