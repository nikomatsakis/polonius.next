.type Origin <: symbol
.type Node <: symbol

/////////////////////////////////////////////
// Inputs
//
// ## Assumptions about ordering
// 
// For a given node `N`...
// 
// * First we perform any accesses `access_origin(O, N)`
// * Then we invalidate any origins `invalidate_origin(L, N)`
// * Then we clear any origins `clear_origin`
// * Then we introduce any subsets `introduce_subset`
// 
// This corresponds to 
// 
// ```
// place = expr
// ```
// 
// * Evaluating the expr accesses the origins (including potentially some in place)
// * Then place is overwritten, invalidating and clearing loans
// * Storing the value also creates subtyping relationships between the type of the value that was stored and the place it was stored into
//
// ## Rules to generate inputs:
//
// * For each place `P` that is read, generate `access_origin`...
//     * for each origin in the type of `P`
//     * for the origin of each reference that is deref'd in `P`
//          * e.g., `read((*x).0)` where `x: &'x0 (&'x1 u32, &'x2 u32)` would generate
//              * `access_origin('x0)` because of the `*`
//              * `access_origin('x1)` because the final type of `(*x).0` is `&'x1 u32`
// * Generate `invalidate_origin` for each loan origin that is invalidated by reads/writes
//     * e.g., if the expression reads `x`, and there is a mut borrow `'L_mut_x` of `x`, then we would generate
//       `invalidate_origin('L_mut_x)`
// * Generate `clear_origin` for each loan origin that is cleared by reads/writes
//     * e.g., if there is a loan `'L_*temp` where `temp: &T` and this expression writes to `temp`, then `'L_*temp` is cleared,
//       not invalidated. This is because memory at `*temp` is not owned, so it is not freed by writing to `temp`,
//       but `*temp` no longer names the same memory anymore.
// * For every `&'L_P P` expression, generate `clear_origin('L_P)` 
// * If this is a `&'L_P P` for some place `P`, it is treated as a read of the place `P`:
//     * In addition, "unroll" P to add subset relations:
//          * If `P = *Q` where `Q: &'O T`, then `'L_P <= O` (do not continue unrolling)
//          * If `P = *Q` where `Q: &'O mut T`, then `'L_P <= O` and continue "unrolling" `Q`
//          * Why do we continue only with `&mut`? The path we took to reach a `&` not important; the ref could just
//            be copied out anyway. For `&mut` that path *is* important, because once we finish with our loan,
//            it can be used to perform mutation again. We need to ensure that we remember the path we came from.
// * If this is a `&'L_mut_P mut P` for some place `P`, it is treated as a write of the place `P`:
//     * In addition, "unroll" P to add subset relations:
//          * If `P = *Q` where `Q: &'O T`, then error (mut borrow of shared content)
//          * If `P = *Q` where `Q: &'O mut T`, then `'L_P <= O` and continue "unrolling" `Q`
// * Generate `introduce_subset` for subsets that arise from where-clauses or subtyping on this node

// marks the origin `o` as a loan origin
.decl mark_as_loan_origin(o: Origin)
.input mark_as_loan_origin

// access_origin data with origin `o` at node `n`
.decl access_origin(o: Origin, n: Node)
.input access_origin

// Invalidate the origin `o` at the node `n`
.decl invalidate_origin(o: Origin, n: Node)
.input invalidate_origin

// All references with origin `o` are overwritten at node `n`
.decl clear_origin(o: Origin, n: Node)
.input clear_origin

// Require that `o1 <= o2` at node `n`
.decl introduce_subset(o1: Origin, o2: Origin, n: Node)
.input introduce_subset

// Control-flow graph edge `n1 -> n2`
.decl cfg_edge(n1: Node, n2: Node)
.input cfg_edge

/////////////////////////////////////////////
// Computes which origins are live at the entry of a node.
.decl origin_live_on_entry(o: Origin, n: Node)
.output origin_live_on_entry

// Note that accesses come before clears, so we check on the outgoing edges.
origin_live_on_entry(O, N) :- 
  access_origin(O, N).

origin_live_on_entry(O, N1) :- 
  cfg_edge(N1, N2),
  !clear_origin(O, N1),
  origin_live_on_entry(O, N2).

/////////////////////////////////////////////
// Computes the subset relationship between origins at node exit.
.decl subset_on_exit(o1: Origin, o2: Origin, n: Node)
.output subset_on_exit

subset_on_exit(O1, O2, N) :- // Filter out clears
  subset_on_entry(O1, O2, N),
  !clear_origin(O1, N),
  !clear_origin(O2, N).

subset_on_exit(O1, O2, N) :- // New subsets
  introduce_subset(O1, O2, N).

subset_on_exit(O1, O3, N1) :- // Transitive closure
  subset_on_exit(O1, O2, N1),
  subset_on_exit(O2, O3, N1).

/////////////////////////////////////////////
// Computes the subset relationship between origins at node entry.
.decl subset_on_entry(o1: Origin, o2: Origin, n: Node)
.output subset_on_entry

// Carried over from predecessor.
// Subsets are filtered from the `subset_on_exit` transitive closure.
subset_on_entry(O1, O2, N2) :- 
  cfg_edge(N1, N2),
  (origin_live_on_entry(O1, N2); mark_as_loan_origin(O1)),
  (origin_live_on_entry(O2, N2); mark_as_loan_origin(O2)),
  subset_on_exit(O1, O2, N1).

////////////////////////////////////////////
// Computes which origins have been invalidated by a previous node.
.decl origin_invalidated(o: Origin, n: Node)
.output origin_invalidated

origin_invalidated(O, N2) :- // Introduced by predecessor
  cfg_edge(N1, N2),
  !clear_origin(O, N1),
  (invalidate_origin(O, N1); origin_invalidated(O, N1)).

// Because invalidations conceptually happen before clears, 
// propagate them across (existing, not introduced) subset relationships
// even if `O1` is also (conceptually later) cleared in `N1`.
origin_invalidated(O2, N2) :- 
  cfg_edge(N1, N2),
  !clear_origin(O2, N1),
  subset_on_entry(O1, O2, N1),
  invalidate_origin(O1, N1).

/////////////////////////////////////////////////////
// Computes which origins are being accessed while having been
// invalidated. This is the main output of Polonius.next.
.decl invalidated_origin_accessed(o: Origin, n: Node)
.output invalidated_origin_accessed

invalidated_origin_accessed(O, N) :- // Introduced by predecessor
  access_origin(O, N),
  origin_invalidated(O, N).

